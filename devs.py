# -*- coding: utf-8 -*-__author__ = 'Moore.Huang'import socketimport sslimport timeimport httplibimport jsonimport threadingimport urllibimport sysfrom PyQt4 import QtGui, QtCorefrom devs_ui import Ui_JDSmartCloud_Devstry:    _fromUtf8 = QtCore.QString.fromUtf8except AttributeError:    def _fromUtf8(s):        return sclass SmartCloudDevice(QtGui.QWidget):    def __init__(self,                 product_id='41',                 address=('apismart.jd.com', 443),                 jd_key='iKvyNBTcB9eTDB1oqgBuxFtVI9iJB1jgBcVqHZXNGCpN19Hp',                 parent=None):        QtGui.QWidget.__init__(self, parent)        self.ui = Ui_JDSmartCloud_Devs()        self.ui.setupUi(self)        self.device_id = self.ui.leDevNum.text()        self.ui.pbClearLog.clicked.connect(self.__clear_log)        self.ui.pbControlDev.clicked.connect(self.__dev_status_slot)        self.ui.pbDevActive.clicked.connect(self.__active_https_slot)        self.ui.pbUploadData.clicked.connect(self.__upload_data_slot)        self.product_id = product_id        self.address = address        self.jd_key = jd_key        self.conn = None        self.access_key = None        self.feed_id = None        self.event_server_address = None        self.event_server_socket = None        self.switch_status = 0        self.__recv_event_fd = threading.Thread(name='recv event', target=self.__recv_event)        self.__send_heartbeat_fd = threading.Thread(name='heartbeat', target=self.__send_heartbeat)        self.__recv_event_fd.setDaemon(True)        self.__send_heartbeat_fd.setDaemon(True)        self.__recv_event_stop_flag = False        self.__send_heartbeat_stop_flag = False        # _res = self.active_https()        # self.ui.pteLog.appendPlainText('激活设备:\t%s' % str(_res))    def active_https(self):        host, port = self.address        address = '%s:%s' % (host, port)        self.conn = httplib.HTTPSConnection(host, port)        method = 'POST'        url = '/v1/device/activate'        headers_req = {'Host': address, 'JD-Key': self.jd_key}        body_req = {'device_id': self.device_id, 'product_id': self.product_id}        body_json_req = json.dumps(body_req)        self.conn.request(method, url, headers=headers_req, body=body_json_req)        _res = self.conn.getresponse()        print _res.version, _res.status, _res.reason        if _res.status is not 200:            print 'Err: HTTPS response.status [%s]' % _res.status            self.conn.close()            return False        headers_rsp = _res.getheaders()        print headers_rsp        body_rsp = _res.read()        body_json_rsp = json.loads(body_rsp)        print 'len => [%d],\t data => \r\n%s' % (len(body_rsp), json.dumps(body_json_rsp, indent=4))        self.ui.pteLog.appendPlainText(json.dumps(body_json_rsp, indent=4))        try:            key = 'code'            if int(body_json_rsp[key]) is not 200:                print "body_json_rsp[%s] is not '200'" % key                self.conn.close()                return False        except KeyError:            print 'Can not find the key[%s]!' % key            self.conn.close()            return False        try:            self.access_key = body_json_rsp['data']['access_key']            self.feed_id = body_json_rsp['data']['feed_id']            self.ui.leFeedID.setText(self.feed_id)            self.ui.leAccessKey.setText(self.access_key)            host, port = body_json_rsp['data']['server_ip'][0].split(':')            self.event_server_address = (str(host), int(port))        except KeyError:            print 'Can not find the key!'            self.conn.close()            return False        print 'access_key => [%s],\t feed_id => [%s],\t server_ip => [%s]'\              % (self.access_key, self.feed_id, self.event_server_address)        self.ui.pbControlDev.setEnabled(True)        self.ui.pbUploadData.setEnabled(True)        return True    def close_https(self):        if self.conn is not None:            self.conn.close()            self.conn = None            self.ui.pbControlDev.setEnabled(False)            self.ui.pbUploadData.setEnabled(False)        else:            print 'the conn is None!'    def __active_https_slot(self):        self.device_id = str(self.ui.leDevNum.text())        if self.device_id == '':            self.ui.pteLog.appendPlainText('请输入设备序号，以便激活此设备！')            return        print 'device id => [%s]' % self.device_id        # self.close_https()        _res = self.active_https()        self.active_event_server_socket()        self.ui.pteLog.appendPlainText('激活设备:\t%s' % str(_res))        self.ui.pbDevActive.setEnabled(False)        self.ui.lStatusDisp.setPixmap(QtGui.QPixmap(_fromUtf8(":/ui/resources/green_light.png")))    def __dev_status_slot(self, status):        if status:            s = 'on'            self.switch_status = 1            self.ui.pbControlDev.setChecked(True)        else:            s = 'off'            self.switch_status = 0            self.ui.pbControlDev.setChecked(False)        icon = QtGui.QIcon()        icon.addPixmap(QtGui.QPixmap(_fromUtf8(":/ui/resources/switch_%s.png" % s)),                       QtGui.QIcon.Normal, QtGui.QIcon.Off)        self.ui.pbControlDev.setIcon(icon)    def __ssl_connect_slot(self, status):        if status:            s = 'Connect'            self.active_event_server_socket()        else:            s = 'Disconnect'            self.close_event_server_socket()        self.ui.pteLog.appendPlainText('SSL连接:\t%s' % s)    def active_event_server_socket(self):        self.event_server_socket = ssl.wrap_socket(socket.socket(), ca_certs='keyfile.pem')        print self.event_server_address        self.event_server_socket.connect(self.event_server_address)        self.__enable_event_server()    def close_event_server_socket(self):        if self.event_server_socket is not None:            self.__disable_event_server()            self.event_server_socket.close()            self.event_server_socket = None        else:            print 'the event_server_socket is None!'    def __enable_event_server(self):        self.__recv_event_fd.start()        self.__send_heartbeat_fd.start()    def __disable_event_server(self):        self.__send_heartbeat_stop_flag = True        self.__send_heartbeat_fd.join()        print 'Send Heartbeat exit!'        self.__recv_event_stop_flag = True        self.__recv_event_fd.join()        print 'Recv Event exit!'    def __send_heartbeat(self):        print 'start send heartbeat!'        while True:            if self.__send_heartbeat_stop_flag is True:                break            hb = {'code': 101, 'device': {'feed_id': str(self.feed_id), 'accees_key': self.access_key}}            hb_json_str = json.dumps(hb)            # print 'heartbeat rsq => %s' % json.dumps(hb)            self.event_server_socket.sendall(hb_json_str+'\r\n')            time.sleep(4*60)    def __recv_event(self):        print 'start recv event!'        control_rsp = {'code': 102, 'result': 0,                       'control_resp': None,                       'device': {                                    'feed_id': self.feed_id,                                    'accees_key': self.access_key                       }}        while True:            if self.__recv_event_stop_flag is True:                break            recv = self.event_server_socket.makefile().readline()            if recv == '':                continue            print 'recv data =>', recv            recv_quote = urllib.unquote(recv).replace('+"', '"')            print 'recv data decode =>', recv_quote            try:                recv_json_obj = json.loads(recv_quote)            except ValueError:                print 'the package is not a JSON pack! [%s]' % recv_quote                continue            try:                if recv_json_obj['code'] == 1002:                    control_rsp['control_resp'] = self.__process_cmd(recv_json_obj['control'])                    control_rsp['device']['feed_id'] = self.feed_id                    control_rsp['device']['accees_key'] = self.access_key                    # print control_rsp['control_resp'], recv_json_obj['control']                else:                    # print 'heartbeat rsp => %s' % recv                    continue            except KeyError:                print 'Can not find the key!'                continue            control_rsp_str = json.dumps(control_rsp, indent=4)            print control_rsp_str            self.ui.pteLog.appendPlainText(control_rsp_str)            self.ui.pteLog.appendPlainText('设备状态:\t%d' % self.switch_status)            self.event_server_socket.sendall(json.dumps(control_rsp)+'\r\n')    def __process_cmd(self, cmd):        try:            for item in cmd:                if item['stream_id'] == 'switch':                    self.switch_status = int(item['current_value'])                    if self.switch_status == 1:                        self.__dev_status_slot(True)                    elif self.switch_status == 0:                        self.__dev_status_slot(False)        except KeyError:            print 'Can not find the key!'            return {"info": "failed", 'switch': str(self.switch_status)}        return {"info": "success", 'switch': str(self.switch_status)}    def __upload_data_slot(self):        temp = str(self.ui.leTempDisp.text())        if temp.isdigit():            res = self.upload_data(temp)            self.ui.pteLog.appendPlainText('上传数据:\t%s' % str(res))        else:            self.ui.pteLog.appendPlainText('Err: 温度数据不为数字！')    def upload_data(self, temp):        host, port = self.address        address = '%s:%s' % (host, port)        time_format = '%Y-%m-%dT%H:%M:%S+0800'        time_str = time.strftime(time_format, time.localtime())        method = 'POST'        url = '/v1/feeds/%s' % self.feed_id        headers_req = {'Host': address, 'JD-Key': self.access_key}        # print url, headers_req        body_req = {'streams': [            {'stream_id': 'temp',             'datapoints': [{'at': time_str, 'value': str(temp)}]},            {'stream_id': 'switch',             'datapoints': [{'at': time_str, 'value': str(self.switch_status)}]}        ]}        body_json_req = json.dumps(body_req)        print 'body => %s' % json.dumps(body_req)        self.conn.request(method, url, headers=headers_req, body=body_json_req)        _res = self.conn.getresponse()        print _res.version, _res.status, _res.reason        if _res.status is not 200:            print 'Err: HTTPS response.status [%s]' % _res.status            self.conn.close()            return False        body_rsp = _res.read()        print 'len => [%d],\t body => %s' % (len(body_rsp), body_rsp)        body_json_rsp = json.loads(body_rsp)        try:            key = 'code'            if int(body_json_rsp[key]) is not 200:                print "body_json_rsp[%s] is not '200'" % key                return False        except KeyError:            print 'Can not find the key[%s]!' % key            return False        return True    def __clear_log(self):        self.ui.pteLog.clear()app = QtGui.QApplication(sys.argv)sca = SmartCloudDevice()sca.show()sys.exit(app.exec_())